package model;

/*A Model specific for Reservations
 * 		1)contains methods to get and set variables
 * 		2)contains methods to create a unique ID
 * 
 * Contains:
 * ID, reservationNumber, clientID, fare, clientInformation, to, from, dateReserved, capacity, departureTime, arrivalTime, train, userName
 * 
 * The following are user inputed:
 * to, from, capacity, departureTime, arrivalTime
 * 
 * The following are generated by program:
 * ID, reservationNumber, dateReserved, train, userName, clientID, fare
 * 
 * @deprecated createNew(), method not used
 */
import java.io.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

public class Reservation extends Model
{
	private String reservationNumber; //alphanumber number unique to each reservation
	private String clientID;
	private String fare;//004 and the appropriate methods
	private String capacity;
	private String to; //005 need to think about how to do this
	private String from;
	private String dateReserved;
	private String departureTime;
	private String arrivalTime;
	private String train;
	private String userName;
	

	
	private final String alphaNumberic = "abcdefghijklmnopqrstuvwxyz1234567890";
	DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
 
  public Reservation() throws IOException
  {
	  this(null);
	  reservationNumber = "";
	  setReservedNumberAndDate();
	  
	  
  }
 
  public Reservation(Integer id) throws IOException
  {
	  super("reservation.csv",id);
	  
	  
  }
  
  @Override
  protected Model createNew()
  {
	  try 
	  {
		  return new Reservation();
	  }
	  catch (IOException ioe)
	  {
		  ioe.printStackTrace();
		  System.out.println("Weird!  IOException while not loading from a file.");
		  return null;
	  }
  }
  
  @Override
  protected Object getID()
  {
	  return id;
  }
  
  @Override
  protected void setID(Object val) {
		id = Integer.parseInt(""+val);
		
	}

  @Override
  public String get(String key)
  {
	  if (key.equals("id"))
		{
			return ""+ id;
		}
		else if (key.equals("reservationNumber"))
		{
			return "" + reservationNumber;
		}
		else if (key.equals("clientID"))
		{
			return clientID;
		}
		else if (key.equals("fare"))
		{
			return fare;
		}
		else if (key.equals("dateReserved"))
		{
			return dateReserved;
		}
		else if (key.equals("capacity"))
		{
			return capacity;
		}
		else if (key.equals("to"))
		{
			return "" + to;
		}
		else if (key.equals("from"))
		{
			return "" + from;
		}
		else if (key.equals("departureTime"))
		{
			return "" + departureTime;
		}
		else if (key.equals("arrivalTime"))
		{
			return "" + arrivalTime;
		}
		else if (key.equals("train"))
		{
			return "" + train;
		}
		else if (key.equals("userName"))
		{
			return "" + userName;
		}
		else
		{
			throw new IllegalArgumentException("Invalid key: "+key);
		}
			  
  }
  
  @Override
  public void set(String key,Object value)
  {
	  if (key.equals("id"))
		{
			this.id=Integer.parseInt("" + value);
		}
		else if (key.equals("reservationNumber"))
		{
			this.reservationNumber = "" + value;
		}
		else if (key.equals("clientID"))
		{
			this.clientID = "" + value;
		}
		else if (key.equals("fare"))
		{
			this.fare = "" + value;
		}
		else if (key.equals("capacity"))
		{
			this.capacity = "" + value;
		}
		else if (key.equals("dateReserved"))
		{
			this.dateReserved = "" + value;
		}
		else if (key.equals("to"))
		{
			this.to = "" + value;
		}
		else if (key.equals("from"))
		{
			this.from = "" + value;
		}
		else if (key.equals("departureTime"))
		{
			this.departureTime = "" + value;
		}
		else if (key.equals("arrivalTime"))
		{
			this.arrivalTime = "" + value;
		}
		else if (key.equals("train"))
		{
			this.train = "" + value;
		}
		else if (key.equals("userName"))
		{
			this.userName = "" + value;
		}
		else
		{
			throw new IllegalArgumentException("Invalid key: "+key);
		}
  }
	public String toString()
	{
		return ("ID: " + id +
				" Reservation Number: " + reservationNumber+
				" Client ID: " + clientID+
				" Fare: " + fare +
				" To Station: " + to +
				" From Station: " + from+
				" Date Reserved: " + dateReserved+
				" Capcity: " + capacity+
				" Departure Time: " + departureTime+
				" Arrival Time: " + arrivalTime +
				" Created by Employee: " + userName);
	}
  protected void setReservedNumberAndDate()
	{
	  
	  	String addChar;
		dateReserved = dateFormat.format(new Date());
		reservationNumber = alphaNumberic.charAt((int) (Math.random() * alphaNumberic.length())) + "";
		for (int i = 0; i<5; i++)
		{
			addChar = alphaNumberic.charAt((int) (Math.random() * alphaNumberic.length())) + "";
			reservationNumber += addChar;
		}
	}
}
