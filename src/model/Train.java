package model;

//
/*A Model specific for trains
 * 		1)contains methods to get and set variables
 * 		2)contains methods to create a unique ID
 * 
 * Contains:
 * ID, name, from, to, departureTime, arrivalTime, fare, capacity, activated
 * 
 * The following are user inputed:
 * name, from, to, departureTime, arrivalTime, fare, capacity, activated
 * 
 * The following are generated by class:
 * ID
 * 
 */


import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.LinkedList;
import java.util.StringTokenizer;
import java.text.DateFormat;
import java.text.SimpleDateFormat;


public class Train extends Model
{
	//attributes 
	private String name;
	private String from;
	private String to;
	private String departureTime;
	private String arrivalTime;
	private String fare;
	private String capacity;
	private boolean activated;

	protected static final DateFormat dateFormatTime = new SimpleDateFormat("HH:mm:ss");
	
	public Train() throws IOException
	{
		this(null);
	}

	public Train(Integer id) throws IOException
	{
		super("train.csv",id);
	}

	//method used to search for a train that has the same: from, to, departureTime, arrivalTime
	//returns ID of that train, else returns -1 if it does not exist
	//used when searching for reservations
	public int getUniqueTrainIDActivated(String from, String to, String departure, String arrival) throws IOException
	{
		boolean checkFrom;
		boolean checkTo;
		boolean checkDeparture;
		boolean checkArrival;
		Model[] all = loadAllTrains();
		Model selected = null;
		for (Model m: all)
		{	
			
			checkFrom = (from).equals("" + m.get("from"));
			
			checkTo= (to).equals("" + m.get("to"));
			
			checkDeparture = departure.equals("" + m.get("departureTime"));
			checkArrival= arrival.equals("" + m.get("arrivalTime"));
			
			if (checkFrom && checkTo && checkDeparture && checkArrival && ("" + m.get("activated")).equals("true"))			
			{
				selected = m;
				fare = m.get("fare") + "";
				return Integer.parseInt(selected.getID().toString());
			}

		}
		return -1;
	}
	
	//returns a Model[] of all Models found in it's .csv file
	public Model[] loadAllTrains() throws IOException
	{
		BufferedReader br = new BufferedReader(new FileReader(filename));
		String line = br.readLine();
		loadFields(line);
		LinkedList<Model> models = new LinkedList<Model>();
		line = br.readLine();

		// loop through lines.
		while (line!=null)
		{  
			Model m = (Model)this.createNew();
			StringTokenizer st = new StringTokenizer(line,",\r\n");
			if (st.countTokens()!=fields.keySet().size())
				break;

			int index=0;

			// loop through all fields.
			while (st.hasMoreTokens())
			{
				m.set(fields.get(index),st.nextToken());
				index++;  
			}
			m.loaded=true;
			m.fields=this.fields;
			models.add(m);
			line = br.readLine();  
		}	//@Override
		br.close();

		return models.toArray(new Model[models.size()]);
	}
	
	@Override
	public Model createNew()
	{
		try{
			return new Train();
		}
		catch (IOException ie)
		{
			ie.printStackTrace();
			return null;
		}
	}
	
	//returns a Model[] of all Models found in it's .csv file that are activated
	//specific for train
	public Model[] loadAllActivated() throws IOException
	{
		BufferedReader br = new BufferedReader(new FileReader(filename));
		String line = br.readLine();
		loadFields(line);
		LinkedList<Model> models = new LinkedList<Model>();
		line = br.readLine();

		// loop through lines.
		while (line!=null)
		{  
			Model m = (Model)this.createNew();
			StringTokenizer st = new StringTokenizer(line,",\r\n");
			if (st.countTokens()!=fields.keySet().size())
				break;

			int index=0;

			// loop through all fields.
			while (st.hasMoreTokens())
			{
				m.set(fields.get(index),st.nextToken());
				index++;  
			}
			m.loaded=true;
			m.fields=this.fields;
			if (("" + m.get("activated")).equals("true"))
			{
				models.add(m);
			}
			
			line = br.readLine();  
		}	//@Override
		br.close();
		
		return models.toArray(new Model[models.size()]);
	}

	//method used to set all attribute values with string
	@Override
	public void set(String key,Object value)
	{
		if (key.equals("id"))
			setID(value);
		else if (key.equals("name"))
			name=(String)value;
		else if (key.equals("from"))
			from=(String)value;
		else if (key.equals("to"))
			to=(String)value;
		else if (key.equals("departureTime"))
			departureTime=(String)value;
		else if (key.equals("arrivalTime"))
			arrivalTime=(String)value;
		else if (key.equals("fare"))
			fare=(String) value;
		else if (key.equals("activated"))
			activated=(""+value).equals("true")||(""+value).equals("yes");
		else if (key.equals("capacity"))
			capacity=(String) value;
		else
			throw new IllegalArgumentException(
					"Unrecognized key: "+key);
	}
	public String toString()
	{
		return ("ID " + id +
				" Name: " + name +
				" From Station: " + from+
				" To Station: " + to +
				" Departure Time: " + departureTime +
				" Arrival Time: " + arrivalTime+
				" Fare: " + fare+
				" Activated status: " + activated +
				" Capacity: " + capacity );
	}
	//method used to get all attribute values as a String
	@Override
	public Object get(String key)
	{
		if (key.equals("id"))
			return ""+id;
		else if (key.equals("name"))
			return name;
		else if (key.equals("from"))
			return ""+from;
		else if (key.equals("to"))
			return ""+to;
		else if (key.equals("departureTime"))
			return departureTime;
		else if (key.equals("arrivalTime"))
			return arrivalTime;
		else if (key.equals("fare"))
			return ""+fare;
		else if (key.equals("capacity"))
			return ""+capacity;
		else if (key.equals("activated"))
			return ""+activated;
		else
			throw new IllegalArgumentException(
					"Unrecognized key: "+key);
	}

	public boolean isActivated()
	{
		return activated;
	}
}
