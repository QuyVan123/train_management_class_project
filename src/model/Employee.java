package model;

//
/*A Model specific for Employee
 * 		1)contains methods to get and set variables
 * 		2)contains methods to create a unique ID
 * 
 * Contains:
 * ID, firstName, lastName, address, phone, email, sex, birthday, dateJoined, nationalInsuranceNumber
 * 
 * The following are user inputed:
 * firstName, lastName, address, phone, email, sex, birthday, nationalInsuranceNumber
 * 
 * The following are generated by class:
 * ID, dateJoined
 * 
 * @deprecated equals(Object), method not used
 */

import java.io.*;
import java.util.*;

public class Employee extends Model {

	//attributes
	private String firstName, lastName;
	private String address, email, sex;
	private String title;
	private String phone;
	private String salary;
	private String birthday;
	private String dateJoined; // generated, current date
	private String nationalInsuranceNumber; //unique, user inputted
	
	public Employee() throws IOException
	{
		this(null);
	}
	
	public Employee(Integer id) throws IOException
	{
		super("employee.csv",id);
		setDateJoined();
	}
	
	//method used to set all attribute values with string
	@Override
	public void set(String key, Object value) {
		if (key.equals("id"))
			setID(value);
		
		else if (key.equals("firstName"))
			firstName=(String)value;
		
		else if (key.equals("lastName"))
			lastName=(String)value;
		
		else if (key.equals("address"))
			address=(String)value;
		
		else if (key.equals("title"))
			title=(String)value;
		
		else if (key.equals("phone"))
			phone=(String)value;

		else if (key.equals("email"))
			email=(String)value;
		
		else if (key.equals("salary"))
			salary=(String)value;
		
		else if (key.equals("sex"))
			sex=(String)value;
		
		else if (key.equals("birthday"))
			birthday=(String)value;
		
		else if (key.equals("dateJoined"))
			dateJoined=(String)value;
		
		else if (key.equals("nationalInsuranceNumber"))
			nationalInsuranceNumber=(String)value;
		
	}

	//method used to get all attribute values as a String
	@Override
	public Object get(String key) {
		if (key.equals("id"))
			return ""+id;
		else if (key.equals("firstName"))
			return firstName;
		else if (key.equals("lastName"))
			return lastName;
		else if (key.equals("address"))
			return address;
		else if (key.equals("title"))
			return title;
		else if (key.equals("phone"))
			return phone;
		else if (key.equals("email"))
			return email;
		else if (key.equals("salary"))
			return salary;
		else if (key.equals("sex"))
			return sex;
		else if (key.equals("birthday"))
			return birthday;
		else if (key.equals("dateJoined"))
			return dateJoined;
		else if (key.equals("nationalInsuranceNumber"))
			return nationalInsuranceNumber;

		else
			throw new IllegalArgumentException("Invalid key: "+key);
	}

	@Deprecated
	@Override
	protected Model createNew() {
		try{
			return new Employee();
		}
		catch (IOException ioe)
		{
			ioe.printStackTrace();
		}
		return null;
	}
	
	//method used to set the dateJoined of client
	//used only in no arg constructor
	protected void setDateJoined()
	{
		set("dateJoined", dateFormatDay.format(new Date()));
	}

	public String toString()
	{
		return ("ID: " + id +
				" First Name: " + firstName +
				" Last Name: " + lastName +
				" Address: " + address +
				" Title: " + title +
				" Phone: " + phone +
				" Email: " + email+
				" Sex: " + sex+
				" Birthday: " + birthday+
				" National Insurance Number: " + nationalInsuranceNumber +
				" Salary: " + salary +
				" Date Joined: " + dateJoined);
	}
	
	//checks if the ID's are equals, which means that they should be the same
	//causes complications, example user does not contain an id when read from file
	@Deprecated
	public boolean equals(Object o)
	{
		return (o instanceof Employee)&&(((Employee)o).id==this.id);
	}
}